local rs = game:GetService("RunService")

local camera = script.Parent.Parent
local variables = camera.Settings

local client

script.Parent:GetPropertyChangedSignal("Occupant"):Connect(function()
	local v = script.Parent.Occupant
	
	if v == nil then
		pcall(function()
			client.RequestRemove:FireAllClients()
			
			wait(1)
			
			client:Destroy()
		end)
	else
		local plr = game.Players:GetPlayerFromCharacter(v.Parent)
		
		if plr ~= nil then
			client = script.Client:Clone()
			client.Parent = plr.PlayerGui
			client.Disabled = false
		end
	end
end)

script.UpdateAngles.OnServerEvent:Connect(function(plr, elev, trav)
	script.Client.StartingAngle.Value = Vector3.new(elev, trav, 0)
	
	camera.Elevation.C1 = CFrame.Angles(math.rad(elev),0,0)
	camera.Traverse.C1 = CFrame.Angles(0,math.rad(trav),0)
end)

local init = function()
	if variables.WeldSeatTo.Value ~= nil then
		local weld = Instance.new("Weld")
		weld.Part0 = camera:FindFirstChildOfClass("Seat")
		weld.Part1 = variables.WeldSeatTo.Value
		weld.C0 = weld.Part0.CFrame:inverse()
		weld.C1 = weld.Part1.CFrame:inverse()
		weld.Parent = weld.Part0
	end
	
	if variables.WeldFLIRTo.Value ~= nil then
		local weld = Instance.new("Weld")
		weld.Part0 = camera.Optics.Base
		weld.Part1 = variables.WeldFLIRTo.Value
		weld.C0 = weld.Part0.CFrame:inverse()
		weld.C1 = weld.Part1.CFrame:inverse()
		weld.Parent = weld.Part0
	end
	
	for _,v in pairs(camera:GetDescendants()) do
		if v:IsA("BasePart") then
			v.Anchored = false
		end
	end
end

init()
