local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
local RunService = game:GetService("RunService")

-- Function to align the player's position with the moving object
local function alignPositionWithObject(object)
    local alignPosition = Instance.new("AlignPosition")
    alignPosition.Attachment0 = rootPart:FindFirstChild("RootAttachment") or Instance.new("Attachment", rootPart)
    alignPosition.Attachment1 = object:FindFirstChild("Attachment") or Instance.new("Attachment", object)
    alignPosition.RigidityEnabled = true
    alignPosition.Parent = rootPart

    local alignOrientation = Instance.new("AlignOrientation")
    alignOrientation.Attachment0 = rootPart:FindFirstChild("RootAttachment") or Instance.new("Attachment", rootPart)
    alignOrientation.Attachment1 = object:FindFirstChild("Attachment") or Instance.new("Attachment", object)
    alignOrientation.RigidityEnabled = true
    alignOrientation.Parent = rootPart
end

-- Function to remove alignment from the player
local function removeAlignment()
    for _, child in pairs(rootPart:GetChildren()) do
        if child:IsA("AlignPosition") or child:IsA("AlignOrientation") then
            child:Destroy()
        end
    end
end

-- Function to check if the player is standing on a moving object
local function checkStandingOnMovingObject()
    local rayOrigin = rootPart.Position
    local rayDirection = Vector3.new(0, -4, 0)
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {character}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist

    local ray = workspace:Raycast(rayOrigin, rayDirection, rayParams)
    if ray and ray.Instance and ray.Instance.Velocity.Magnitude > 0 then
        alignPositionWithObject(ray.Instance)
    else
        removeAlignment()
    end
end

-- Connect the check function to the render step
RunService.RenderStepped:Connect(checkStandingOnMovingObject)