local settings = {
	ToolMapping = {
		["ClickDetection_M870"] = {
			toolName = "M870",
			meshParts = {"M870"},
			clickDetectorPart = "ClickDetection_M870",
			maxUses = nil,
			transparencyOnGive = 1,
			transparencyOnReturn = 0,
			canCollideOnGive = false,
			canCollideOnReturn = true,
			notificationOnGive = "You have received the M870 tool.",
			notificationOnReturn = "You have returned the M870 tool.",
			canReturn = true
		},
		["ClickDetection_Slap"] = {
			toolName = "Hinge Charge",
			meshParts = {"SlapBody", "SlapBody2"},
			clickDetectorPart = "ClickDetection_Slap",
			maxUses = 3,
			transparencyOnGive = 1,
			canCollideOnGive = false,
			notificationOnGive = "You have received the Hinge Charge.",
			canReturn = false
		}
	},
	SlapToolName = "Hinge Charge",
	MaxSlapUses = 3,
	HiddenToolName = "M870"
}

-- Main Script
local Tool = script.M870
local globalSlapUses = 0 -- Global usage count for Slap

-- Function to check if player has the tool
local function hasTool(player, toolName)
	local backpack = player:FindFirstChild("Backpack")
	local character = player.Character
	return (backpack and backpack:FindFirstChild(toolName)) or (character and character:FindFirstChild(toolName))
end

-- Function to remove a tool from the player's backpack and character
local function removeTool(player, toolName)
	for _, container in ipairs({player:FindFirstChild("Backpack"), player.Character}) do
		if container then
			local tool = container:FindFirstChild(toolName)
			if tool then
				tool:Destroy()
			end
		end
	end
end

-- Function to toggle multiple mesh parts
local function toggleMeshParts(parts, transparency, canCollide)
	for _, partName in ipairs(parts) do
		local part = script.Parent.Parent:FindFirstChild(partName)
		if part then
			part.Transparency = transparency
			part.CanCollide = canCollide
		end
	end
end

-- Function to show notifications (Placeholder, implement UI as needed)
local function showNotification(player, message)
	print("Notification to " .. player.Name .. ": " .. message)
end

-- Function to find tool in ReplicatedStorage
local function findToolInReplicatedStorage(toolName)
	local tool = Tool:FindFirstChild(toolName)
	if not tool then
		warn("[ERROR] Tool '" .. toolName .. "' not found in ReplicatedStorage!")
	end
	return tool
end

-- Function to give a tool and toggle mesh visibility
local function giveToolAndToggleMesh(player, toolData)
	local character = player.Character
	local backpack = player:FindFirstChild("Backpack")
	if not character or not backpack then return end

	local tool = findToolInReplicatedStorage(toolData.toolName)
	if not tool then return end

	if toolData.toolName == settings.SlapToolName then
		if globalSlapUses >= settings.MaxSlapUses then
			warn(settings.SlapToolName .. " has reached its global limit!")
			return
		end
		globalSlapUses = globalSlapUses + 1
		if globalSlapUses >= settings.MaxSlapUses then
			toggleMeshParts(toolData.meshParts, toolData.transparencyOnGive, toolData.canCollideOnGive)
			local slapClickPart = script.Parent.Parent:FindFirstChild(toolData.clickDetectorPart)
			if slapClickPart then
				local clickDetector = slapClickPart:FindFirstChild("ClickDetector")
				if clickDetector then
					clickDetector:Destroy()
				end
			end
		end
	end

	local hasTakenM870 = player:FindFirstChild("HasTakenM870")
	if toolData.toolName == settings.HiddenToolName and toolData.canReturn then
		if hasTool(player, toolData.toolName) then
			removeTool(player, toolData.toolName)
			toggleMeshParts(toolData.meshParts, toolData.transparencyOnReturn, toolData.canCollideOnReturn)
			if hasTakenM870 then
				hasTakenM870.Value = false
			end
			showNotification(player, toolData.notificationOnReturn)
		else
			if hasTakenM870 and hasTakenM870.Value then
				warn("Player does not have the M870 tool to put back!")
				showNotification(player, "You do not have the M870 tool to put back!")
			else
				local toolClone = tool:Clone()
				toolClone.Parent = backpack
				toggleMeshParts(toolData.meshParts, toolData.transparencyOnGive, toolData.canCollideOnGive)
				if not hasTakenM870 then
					hasTakenM870 = Instance.new("BoolValue")
					hasTakenM870.Name = "HasTakenM870"
					hasTakenM870.Value = true
					hasTakenM870.Parent = player
				else
					hasTakenM870.Value = true
				end
				showNotification(player, toolData.notificationOnGive)
			end
		end
		return
	end

	if hasTool(player, toolData.toolName) then
		return
	end

	local toolClone = tool:Clone()
	toolClone.Parent = backpack
	if toolData.toolName == settings.HiddenToolName then
		toggleMeshParts(toolData.meshParts, toolData.transparencyOnGive, toolData.canCollideOnGive)
	end
	showNotification(player, toolData.notificationOnGive)
end

-- Function to setup click detection
local function setupClickDetection(partName, toolData)
	local clickPart = script.Parent.Parent:FindFirstChild(partName)
	if not clickPart then
		warn(partName .. " not found!")
		return
	end

	local clickDetector = clickPart:FindFirstChild("ClickDetector")
	if not clickDetector then
		warn("ClickDetector not found inside " .. partName .. "!")
		return
	end

	clickDetector.MouseClick:Connect(function(player)
		giveToolAndToggleMesh(player, toolData)
	end)
end

-- Setup click detection for tools using settings module
for partName, toolData in pairs(settings.ToolMapping) do
	setupClickDetection(partName, toolData)
end
