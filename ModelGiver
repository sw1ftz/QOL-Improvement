-- Attach Points Configuration
local attachpts = {
	R15 = {
		Vest = "UpperTorso",
		Face = "Head",
		NODs = "Head",
		Belt = "LowerTorso",
	},
	R6 = {
		Vest = "Torso",
		Face = "Head",
		NODs = "Head",
		Belt = "Torso",
	}
}

-- Services
local TweenService = game:GetService("TweenService")

-- Script Variables
local scriptParent = script.Parent
local model = scriptParent.Parent:FindFirstChildOfClass("Model")
local upnvg = model:FindFirstChild("Up")
local downnvg = model:FindFirstChild("Down")

-- Helper Functions
local function createMotor6D(name, part0, part1, cframeValue)
	local motor = Instance.new("Motor6D")
	motor.Name = name
	motor.Part0 = part0
	motor.Part1 = part1
	motor.C0 = cframeValue.Value
	motor.Parent = part0
	return motor
end

local function createCFrameValue(name, value, parent)
	local cframeValue = Instance.new("CFrameValue")
	cframeValue.Name = name
	cframeValue.Value = value
	cframeValue.Parent = parent
	return cframeValue
end

local function weldParts(part1, part2)
	local welder = Instance.new("WeldConstraint")
	welder.Parent = part1
	welder.Part0 = part1
	welder.Part1 = part2
end

local function setupNVGJoints(up, down)
	local nvgjoint = createMotor6D("twistjoint", model.Middle, up.PrimaryPart, createCFrameValue("upvalue", model.Middle.CFrame:inverse() * up.PrimaryPart.CFrame, up))
	createCFrameValue("downvalue", model.Middle.CFrame:inverse() * down.PrimaryPart.CFrame, up)

	for _, v in pairs(model:GetDescendants()) do
		if v:IsA("MeshPart") or v:IsA("Part") or v:IsA("UnionOperation") then
			if v.Name ~= "Middle" then
				weldParts(v, v.Parent:FindFirstChild("Middle") or v.Parent.Parent.Middle)
			end
		end
	end
end

local function handleNVGModel(upnvg, downnvg)
	if upnvg and downnvg then
		setupNVGJoints(upnvg, downnvg)
		downnvg:Destroy()

		local autoconfig = script:WaitForChild("AUTO_CONFIG"):Clone()
		autoconfig.Parent = upnvg
	elseif upnvg or downnvg then
		print("Missing " .. (not upnvg and "Up" or "Down") .. "NVG Model")
	end
end

local function attachModelToCharacter(p, attachType, model)
	local char = p.Character

	local oldModel = char:FindFirstChild(attachType)
	if oldModel then
		oldModel:Remove()
	end

	local newModel = model:Clone()
	for _, v in pairs(newModel:GetDescendants()) do
		if v:IsA("MeshPart") or v:IsA("Part") or v:IsA("UnionOperation") then
			v.Anchored = false
		end
	end

	local weld = Instance.new("Weld")
	weld.Part0 = char[attachpts[char.Humanoid.RigType.Name][attachType]]
	weld.Part1 = newModel.Middle
	weld.Parent = weld.Part0

	newModel.Parent = char

	local GUI = scriptParent["IR_GUI"]:Clone()
	GUI.Parent = game.Players:GetPlayerFromCharacter(char).PlayerGui
	GUI.Core.Disabled = false
end

handleNVGModel(upnvg, downnvg)

local attachType = model.Name
local bounced = false

scriptParent.ClickDetector.MouseClick:Connect(function(p)
	if not bounced then
		bounced = true
		delay(2, function() bounced = false end)
		attachModelToCharacter(p, attachType, model)
	end
end)
