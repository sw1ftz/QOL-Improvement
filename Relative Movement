local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
character:WaitForChild("HumanoidRootPart")
local hrp = character.HumanoidRootPart
local humanoid = character:WaitForChild("Humanoid")

local currentPlatform = nil
local lastPlatformPosition = nil

local raycastParams = RaycastParams.new()
raycastParams.FilterDescendantsInstances = {character}
raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

-- Detect if player is on a moving platform
local function updatePlatformDetection()
	local rayOrigin = hrp.Position
	local rayDirection = Vector3.new(0, -5, 0)

	local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
	if result and result.Instance and not result.Instance.Anchored then
		if currentPlatform ~= result.Instance then
			-- New platform detected
			currentPlatform = result.Instance
			lastPlatformPosition = currentPlatform.Position
		end
	else
		-- No platform detected
		currentPlatform = nil
		lastPlatformPosition = nil
	end
end

-- Apply platform-relative velocity instead of CFrame teleport
local function applyPlatformVelocity()
	if not currentPlatform or not lastPlatformPosition then
		return
	end

	local currentPosition = currentPlatform.Position
	local platformVelocity = (currentPosition - lastPlatformPosition) / RunService.RenderStepped:Wait()

	-- Apply velocity directly to the player
	local rootVelocity = hrp.Velocity
	hrp.Velocity = rootVelocity + platformVelocity

	-- Update for next frame
	lastPlatformPosition = currentPosition
end

-- Main loop
RunService.RenderStepped:Connect(function()
	if humanoid:GetState() == Enum.HumanoidStateType.Seated then
		-- Skip if the player is seated (like in a vehicle seat)
		currentPlatform = nil
		return
	end

	updatePlatformDetection()

	if currentPlatform then
		applyPlatformVelocity()
	end
end)
